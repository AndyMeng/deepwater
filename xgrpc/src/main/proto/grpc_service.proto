// DeepWater Remote Procedure Service

syntax="proto3";

option java_multiple_files = true;
option java_package = "ai.h2o.deepwater.backends.grpc";
option java_outer_classname = "DeepWaterGRPCService";


package deepwater;

service DeepWaterPredictBackend {
    rpc Execute(ExecuteRequest) returns (ExecuteResponse) {};
}

service DeepWaterTrainBackend {

    rpc CreateModel(CreateModelRequest) returns (CreateModelResponse) {};

    rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse) {};

    rpc DeleteSession(DeleteSessionRequest) returns (DeleteSessionResponse) {};

    rpc LoadModel(LoadModelRequest) returns (LoadModelResponse) {};

    rpc SaveModel(SaveModelRequest) returns (SaveModelResponse) {};

    rpc LoadModelVariables(LoadModelVariablesRequest)
    returns(LoadModelVariablesResponse) {};

    rpc SaveModelVariables(SaveModelVariablesRequest) returns
    (SaveModelVariablesResponse) {};

    rpc SetModelParameters(SetModelParametersRequest) returns (SetModelParametersResponse) {};

    rpc Execute(ExecuteRequest) returns (ExecuteResponse) {};

}

message Session {
    string handle = 1;
}

message BackendModel {
    bytes id = 1;
    bytes state = 2;
}

message CreateModelRequest {
    Session session = 1;
    string modelName = 2;
    map<string, ParamValue> params = 3;
}

message CreateModelResponse {
    BackendModel model = 1;
    Status status = 2;
}

message CreateSessionRequest {
    map<string, ParamValue> options = 1;
}

message CreateSessionResponse {
    Session session = 1;
    Status status = 2;
}


message DeleteSessionRequest {
    Session session = 1;
}

message DeleteSessionResponse {
    Status  status = 1;
}


message Status {
    bool ok = 1;
    string message = 2;
}


message LoadModelRequest {
    Session session = 1;
    map<string, ParamValue> params = 3;
}

message LoadModelResponse {
    BackendModel model = 1;
    Status  status = 2;
}

message SaveModelRequest {
    Session session = 1;
    BackendModel model = 2;
    map<string, ParamValue> params = 3;
}

message SaveModelResponse {
    Status  status = 1;
}

message LoadModelVariablesRequest {
    Session session = 1;
    BackendModel model = 2;
    map<string, ParamValue> params = 3;
}

message LoadModelVariablesResponse {
    Status  status = 1;
}


message SaveModelVariablesRequest {
    Session session = 1;
    BackendModel model = 2;
    map<string, ParamValue> params = 3;
}

message SaveModelVariablesResponse {
    Status  status = 1;
}

message SetModelParametersRequest{
    Session session = 1;
    BackendModel model = 2;
    map<string, ParamValue> params = 3;
}

message SetModelParametersResponse{
    Status status = 1;
    map<string, ParamValue> params = 2;
}


message ExecuteRequest {
    Session session = 1;
    BackendModel model = 2;
    repeated Tensor feeds = 3;
    repeated Tensor fetches = 4;
}

message ExecuteResponse {
    Status status = 1;
    repeated Tensor fetches = 2;
}

enum DataType {
    DT_INVALID = 0;
    DT_FLOAT32 = 1;
    DT_FLOAT64 = 2;
    DT_INT32= 3;
    DT_INT64 = 4;
    DT_BOOL = 5;
    DT_STRING = 6;
}

message Shape {
    message Dim {
        int64 size = 1;
    }
    repeated Dim dim = 2;
}

message Tensor {
    Shape shape = 1;
    DataType type = 2;
    string name =  3;
    repeated bytes string_value = 4;
    repeated int32 int32_value = 5 [packed = true];
    repeated int64 int64_value = 6 [packed = true];
    repeated float float_value = 7 [packed = true];
    repeated double double_value = 8 [packed = true];
    repeated bool bool_value = 9 [packed = true];
}

message ParamValue {
    message ListValue {
        repeated string s = 2;                        // "list(string)"
        repeated int64 i = 3 [packed = true];        // "list(int)"
        repeated float c = 4 [packed = true];        // "list(float)"
        repeated double f = 5 [packed = true];        // "list(double)"
        repeated bool b = 6 [packed = true];         // "list(bool)"
        repeated bool bb = 7 [packed = true];
    }

    oneof value {
        string s = 2; // "string"
        int64 i = 3; // "int"
        float f = 4; // "float"
        double d = 5; // "float"
        bool b = 6; // "bool"
        bytes bb = 7; // "string"
        ListValue list = 1; // any "list(...)"
    }
}


